/*
 * Copyright (C) 2017 Media Lab Asia
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.mla.user;

import com.mla.main.Configuration;
import com.mla.main.DbConnect;
import com.mla.main.Logging;
import com.mla.secure.Security;
import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;
/**
 *
 * @Designing model function for user
 * @author Amit Kumar Singh
 * 
 */
public class UserAction {
    Connection connection = null;//DbConnect.getConnection();
    
    public UserAction() throws SQLException{ 
        connection = DbConnect.getConnection();
    }  
    
    /**
     * Description:
     *  Inserts a New User record in database table "mla_users" based on data entered in User Registration stage
     *  We need ID generated by this Insert for further inserting data for this user in related tables.
     *  Related tables are: "mla_user_usergroup_map", "mla_user_configuration", "mla_user_preference" and "mla_user_access".
     * Date Added: 3 Feb 2017
     * Author: Aatif Ahmad Khan
     * @param objUser
     * @return ID for inserted row or -1 (if insert fails)
     */
    int addUser(User objUser){
        Statement oStatement =null;
        ResultSet oResultSet= null;
        String strQuery=null;
        //boolean oResult=false;
        int key=-1;
        try {
            //System.out.println("<<<<<< addUser >>>>>>");
            strQuery = "INSERT INTO `mla_users` (`userid`, `username`, `password`, `app_password`, `name`, `email`, `contact_number`, `geo_city`, `geo_lat`, `geo_lng`, `address`, `city`, `state`, `country`, `pincode`) values ('"
                    +objUser.getStrUserID()+"', '"+objUser.getStrUsername()+"', '"+objUser.getStrPassword()+"', '"+objUser.getStrAppPassword()+"', '"+objUser.getStrName()+"', '"+objUser.getStrEmail()+"', '"+objUser.getStrContactNumber()
                    +"', '"+objUser.getStrGeoCity()+"', "+String.valueOf(objUser.getDblGeoLat())+", "+String.valueOf(objUser.getDblGeoLng())+", '"+objUser.getStrAddress()+"', '"+objUser.getStrCityAddress()
                    +"', '"+objUser.getStrStateAddress()+"', '"+objUser.getStrCountryAddress()+"', "+objUser.getStrPincodeAddress()+");";
            //System.out.println("Query "+strQuery);
            
            PreparedStatement pstmt = connection.prepareStatement(strQuery, Statement.RETURN_GENERATED_KEYS);  
            pstmt.executeUpdate();  
            ResultSet keys = pstmt.getGeneratedKeys();    
            keys.next();  
            key = keys.getInt(1);
            //System.err.println("Id: "+key);
        } catch (Exception ex) {
            new Logging("SEVERE",UserAction.class.getName(),"addUser()"+strQuery,ex);
        } finally {
            try {
                new Logging("INFO",UserAction.class.getName(),"addUser() connection closed",null);
                if(oResultSet!=null) {
                    oResultSet.close();
                    oResultSet=null;
                }
                if(oStatement!=null) {
                    oStatement.close();
                    oStatement=null;
                }
                if(connection!=null) {
                    connection.close();
                    connection=null;
                }
            } catch (Exception ex) {
                new Logging("SEVERE",UserAction.class.getName(),"addUser() error closing connection",ex);
            }
        }
        //System.out.println("<<<<<< addUser >>>>>>");
        return key;
    }
    
    /**
     * Description: Inserts record in "mla_user_usergroup_map" based on ID generated for newly registered user.
     * Date Added: 3 Feb 2017
     * Author: Aatif Ahmad Khan
     * @param uId (USER_ID)
     * @param gId (GROUP_ID)
     * @return insertion succeeded or failed
     */
    boolean addUserGroupMap(int uId, int gId){
        Statement oStatement =null;
        ResultSet oResultSet= null;
        String strQuery=null;
        boolean oResult=false;
        try {
            //System.out.println("<<<<<< addUserGroupMap >>>>>>");
            strQuery = "INSERT INTO `mla_user_usergroup_map`(`user_id`, `group_id`) values ("+String.valueOf(uId)+", "+String.valueOf(gId)+");";
            //System.out.println("Query: "+strQuery);
            PreparedStatement pstmt = connection.prepareStatement(strQuery);
            pstmt.executeUpdate();
            oResult=true;       // insertion succeeded
            //System.out.println("mla_user_usergroup_map successful");
        } catch (Exception ex) {
            new Logging("SEVERE",UserAction.class.getName(),"addUserGroupMap"+strQuery,ex);
        } finally {
            try {
                new Logging("INFO",UserAction.class.getName(),"addUserGroupMap connection closed",null);
                if(oResultSet!=null) {
                    oResultSet.close();
                    oResultSet=null;
                }
                if(oStatement!=null) {
                    oStatement.close();
                    oStatement=null;
                }
                if(connection!=null) {
                    connection.close();
                    connection=null;
                }
            } catch (Exception ex) {
                new Logging("SEVERE",UserAction.class.getName(),"addUserGroupMap error closing connection",ex);
            }
        }
        //System.out.println("<<<<<< addUserGroupMap >>>>>>");
        return oResult;
    }
    
    /**
     * Description: Inserts record in "mla_user_configuration" based on USERID of newly registered user.
     * Date Added: 6 Feb 2017
     * Author: Aatif Ahmad Khan
     * @param uId (USERID)
     * @param clothtype
     * @return insertion succeeded or failed
     */
    boolean addUserConfiguration(String uId, String clothtype){
        Statement oStatement =null;
        ResultSet oResultSet= null;
        String strQuery=null;
        boolean oResult=false;
        try {
            //System.out.println("<<<<<< addUserConfiguration >>>>>>");
            strQuery = "INSERT INTO `mla_user_configuration`(`USERID`, `CLOTHTYPE`) values ('"+uId+"', '"+clothtype+"');";
            //System.out.println("Query: "+strQuery);
            PreparedStatement pstmt = connection.prepareStatement(strQuery);
            pstmt.executeUpdate();
            oResult=true;       // insertion succeeded
            //System.out.println("mla_user_configuration successful");
        } catch (Exception ex) {
            new Logging("SEVERE",UserAction.class.getName(),"addUserConfiguration"+strQuery,ex);
        } finally {
            try {
                new Logging("INFO",UserAction.class.getName(),"addUserConfiguration connection closed",null);
                if(oResultSet!=null) {
                    oResultSet.close();
                    oResultSet=null;
                }
                if(oStatement!=null) {
                    oStatement.close();
                    oStatement=null;
                }
                if(connection!=null) {
                    connection.close();
                    connection=null;
                }
            } catch (Exception ex) {
                new Logging("SEVERE",UserAction.class.getName(),"addUserConfiguration error closing connection",ex);
            }
        }
        //System.out.println("<<<<<< addUserConfiguration >>>>>>");
        return oResult;
    }
    
    
    // added 03 Feb 2017, to validate unique username in User Registration
    /**
     * Description: Validates unique username (during User Registration). Fires a SELECT query on database table "mla_users".
     * Date Added: 3 Feb 2017
     * Author: Aatif Ahmad Khan
     * @param username
     * @return username exists or not
     */
    boolean isUsernameExisting(String username){
        Statement oStatement =null;
        ResultSet oResultSet= null;
        String strQuery=null;
        boolean oResult=true;           // assuming username not exists
        try {
            //System.out.println("<<<<<< isUsernameExisting >>>>>>");
            strQuery = "SELECT * FROM `mla_users` where `username` ='"+username+"';";
            //System.out.println("Query "+strQuery);
            oStatement = connection.createStatement();
            oResultSet = oStatement.executeQuery(strQuery);
            if(oResultSet.next()){
                oResult = false;        // existing username found in database
            }
        } catch (Exception ex) {
            new Logging("SEVERE",UserAction.class.getName(),"isUsernameExisting()"+strQuery,ex);
        } finally {
            try {
                new Logging("INFO",UserAction.class.getName(),"isUsernameExisting() connection closed",null);
                if(oResultSet!=null) {
                    oResultSet.close(); // close Result Set
                    oResultSet=null;
                }
                if(oStatement!=null) {
                    oStatement.close(); // close Statement
                    oStatement=null;
                }
                if(connection!=null) {
                    connection.close(); // close connection
                    connection=null;
                }
            } catch (Exception ex) {
                new Logging("SEVERE",UserAction.class.getName(),"isUsernameExisting() error closing connection",ex);
            }
        }
        //System.out.println("<<<<<< isUsernameExisting >>>>>>");
        return oResult;
    }  
    
    /**
     * Description: Finds whether a record exists with given username and given email.
     * Date Added: 8 Feb 2017
     * Author: Aatif Ahmad Khan
     * @param username
     * @param email
     * @return details match or not
     */
    boolean verifyUsernameEmail(String strUsername, String strEmail){
        Statement oStatement =null;
        String strQuery=null;
        ResultSet oResultSet= null;
        boolean found=false;
        try {
            strQuery="SELECT * from mla_users where `username`='"+strUsername+"' AND `email`='"+strEmail+"';";
            //System.out.println("Query "+strQuery);
            oStatement = connection.createStatement();
            oResultSet = oStatement.executeQuery(strQuery);
            if(oResultSet.next()){
                found = true;
            }
        } catch (Exception ex) {
            new Logging("SEVERE",UserAction.class.getName(),"matchUsernameAndEmail()"+strQuery,ex);
        } finally {
            try {
                new Logging("INFO",UserAction.class.getName(),"matchUsernameAndEmail() connection closed",null);
                if(oResultSet!=null) {
                    oResultSet.close();
                    oResultSet=null;
                }
                if(oStatement!=null) {
                    oStatement.close();
                    oStatement=null;
                }
                if(connection!=null) {
                    connection.close();
                    connection=null;
                }
            } catch (Exception ex) {
                new Logging("SEVERE",UserAction.class.getName(),"matchUsernameAndEmail() error closing connection",ex);
            }
        }
        return found;
    }
    
    boolean verifyLogin(User objUser){
        Statement oStatement =null;
        ResultSet oResultSet= null;
        String strQuery=null;
        boolean oResult=false;
        try {
            System.out.println("<<<<<< verifyLogin >>>>>>");
            //strQuery = "SELECT `USERID` FROM `mla_users` where username ='"+objUser.getStrUsername()+"' AND app_password ='"+objUser.getStrPassword()+"';";
            strQuery="SELECT `userid`, `password` FROM `mla_users` where username='"+objUser.getStrUsername()+"';";
            oStatement = connection.createStatement();
            oResultSet=oStatement.executeQuery(strQuery);
            /*
            if(oResultSet.next()){
                objUser.setStrUserID(oResultSet.getString("USERID"));
                oResult = true;
            }
            */
            while(oResultSet.next()){
                String storedHash=oResultSet.getString("password");
                boolean passwordMatched=Security.checkPassword(objUser.getStrPassword(), ("$2a"+storedHash.substring(3)));
                System.out.println(storedHash+"\t"+("$2a"+storedHash.substring(3)));
                if(passwordMatched){
                    System.out.println("Login Successful");
                    objUser.setStrUserID(oResultSet.getString("userid"));
                    oResult=true;
                    break;
                } 
            }
            /*
            */
        } catch (Exception ex) {
            new Logging("SEVERE",UserView.class.getName(),"verifyLogin()"+strQuery,ex);
        } finally {
            try {
                new Logging("INFO",UserView.class.getName(),"verifyLogin() connection closed",null);
                if(oResultSet!=null) {
                    oResultSet.close();
                    oResultSet=null;
                }
                if(oStatement!=null) {
                    oStatement.close();
                    oStatement=null;
                }
                if(connection!=null) {
                    connection.close();
                    connection=null;
                }
            } catch (Exception ex) {
                new Logging("SEVERE",UserView.class.getName(),"verifyLogin() error closing connection",ex);
            }
        }
        System.out.println("<<<<<< verifyLogin >>>>>>");
        return oResult;
    }
    
    boolean verifyAccess(User objUser){
        Statement oStatement =null;
        ResultSet oResultSet= null;
        String strQuery=null;
        boolean oResult=false;
        try {
            System.out.println("<<<<<< verifyAccess >>>>>>");
            strQuery = "SELECT `USERID` FROM `mla_users` where username ='"+objUser.getStrUsername()+"' AND app_password ='"+objUser.getStrPassword()+"';";
            System.out.println("Query "+strQuery);
            oStatement = connection.createStatement();
            oResultSet = oStatement.executeQuery(strQuery);
            if(oResultSet.next()){
                objUser.setStrUserID(oResultSet.getString("USERID"));
                oResult = true;
            }
        } catch (Exception ex) {
            new Logging("SEVERE",UserView.class.getName(),"verifyAccess()"+strQuery,ex);
        } finally {
            try {
                new Logging("INFO",UserView.class.getName(),"verifyAccess() connection closed",null);
                if(oResultSet!=null) {
                    oResultSet.close();
                    oResultSet=null;
                }
                if(oStatement!=null) {
                    oStatement.close();
                    oStatement=null;
                }
                if(connection!=null) {
                    connection.close();
                    connection=null;
                }
            } catch (Exception ex) {
                new Logging("SEVERE",UserView.class.getName(),"verifyAccess() error closing connection",ex);
            }
        }
        System.out.println("<<<<<< verifyAccess >>>>>>");
        return oResult;
    }
    
    public boolean getConfiguration(Configuration objConfiguration) {
        Statement oStatement =null;
        ResultSet oResultSet= null;
        String strQuery=null;
        try {
            //System.out.println("<<<<<< getConfiguration >>>>>>");
            strQuery = "SELECT `name`, `app_password`, `email`, `organization`, `contact_number`, `geo_city`, `geo_lat`, `geo_lng`, `address`, `city`, `state`, `country`, `pincode`, `occupation`, `education`, `gender`, `dob`, `is_synchronization`,"
                    + " `CURRENCY`, `MEASUREMENT`, `LANGUAGE`, `RESOLUTION`, `DPI`, `TEMPLATE`, `ICONCOLOR`, `ICONDCOLOR`, `BIGFONT`, `BIGFONTSIZE`, `SMALLFONT`, `SMALLFONTSIZE`, `DATAPATH`, `HELPPATH`, `SAVEPATH`, `LOGPATH`, `ERRORPATH`,"
                    + " `FABRIC_LIBRARY`, `ARTWORK_LIBRARY`, `WEAVE_LIBRARY`, `CLOTH_LIBRARY`, `PATTERN_LIBRARY`, `YARN_LIBRARY`, `COLOUR_LIBRARY`, `LANGUAGE_LIBRARY`, `DEVICE_LIBRARY`, `FABRIC_BASE_LIBRARY`,"
                    + " `DEFAULTFABRIC`, `CLOTHTYPE`, `FABRICTYPE`, `FABRICLENGTH`, `FABRICWIDTH`, `ARTWORKLENGTH`, `ARTWORKWIDTH`, `PPI`, `EPI`, `HPI`, `TPD`, `HOOKS`, `PICKS`, `REEDCOUNT`, `DENTS`, `PROTECTION`, `BINDING`, `GRAPHSIZE`,"
                    + " `WEFTNAME`, `WEFTCOLOR`, `WEFTPATTERN`, `WEFTREPEAT`, `WEFTCOUNT`, `WEFTUNIT`, `WEFTPLY`, `WEFTDFACTOR`, `WEFTDIAMETER`, `WEFTTWIST`, `WEFTTSENCE`, `WEFTHAIRNESS`, `WEFTHDISTRIBUTION`, `WEFTPRICE`,"
                    + " `WARPNAME`, `WARPCOLOR`, `WARPPATTERN`, `WARPREPEAT`, `WARPCOUNT`, `WARPUNIT`, `WARPPLY`, `WARPDFACTOR`, `WARPDIAMETER`, `WARPTWIST`, `WARPTSENCE`, `WARPHAIRNESS`, `WARPHDISTRIBUTION`, `WARPPRICE`"
                    + "  FROM `mla_user_configuration` "
                    + "  LEFT JOIN `mla_user_preference` ON `mla_user_preference`.USERID = `mla_user_configuration`.USERID"
                    + "  LEFT JOIN `mla_user_access` ON `mla_user_access`.USERID = `mla_user_configuration`.USERID"
                    + "  LEFT JOIN `mla_users` ON `mla_users`.USERID = `mla_user_configuration`.USERID"
                    + "  WHERE `mla_user_configuration`.USERID ='"+objConfiguration.getObjUser().getStrUserID()+"' AND `mla_user_configuration`.CLOTHTYPE = '"+objConfiguration.getStrClothType()+"';";
            //System.out.println("Query "+strQuery);
            oStatement = connection.createStatement();
            oResultSet = oStatement.executeQuery(strQuery);
            while(oResultSet.next()) {
                objConfiguration.getObjUser().setStrName(oResultSet.getString("name"));
                objConfiguration.getObjUser().setStrEmailID(oResultSet.getString("email"));
                objConfiguration.getObjUser().setStrAppPassword(oResultSet.getString("app_password"));
                objConfiguration.getObjUser().setStrOrganization(oResultSet.getString("organization"));
                objConfiguration.getObjUser().setStrContactNumber(oResultSet.getString("contact_number"));
                objConfiguration.getObjUser().setStrGeoCity(oResultSet.getString("geo_city"));
                objConfiguration.getObjUser().setDblGeoLat(oResultSet.getDouble("geo_lat"));
                objConfiguration.getObjUser().setDblGeoLng(oResultSet.getDouble("geo_lng"));
                objConfiguration.getObjUser().setStrAddress(oResultSet.getString("address"));
                objConfiguration.getObjUser().setStrCityAddress(oResultSet.getString("city"));
                objConfiguration.getObjUser().setStrStateAddress(oResultSet.getString("state"));
                objConfiguration.getObjUser().setStrCountryAddress(oResultSet.getString("country"));
                objConfiguration.getObjUser().setStrPincodeAddress(oResultSet.getString("pincode"));
                objConfiguration.getObjUser().setStrOccupation(oResultSet.getString("occupation"));
                objConfiguration.getObjUser().setStrEducation(oResultSet.getString("education"));
                objConfiguration.getObjUser().setStrGender(oResultSet.getString("gender"));
                objConfiguration.getObjUser().setStrDOB(oResultSet.getString("dob"));
                objConfiguration.setStrLanguage(oResultSet.getString("LANGUAGE").toString()); 
                objConfiguration.setStrResolution(oResultSet.getString("RESOLUTION").toString());
                objConfiguration.setIntDPI(Integer.parseInt(oResultSet.getString("DPI").toString()));
                objConfiguration.setStrMeasurement(oResultSet.getString("MEASUREMENT").toString());
                objConfiguration.setStrCurrency(oResultSet.getString("CURRENCY").toString());
                objConfiguration.setStrTemplate(oResultSet.getString("TEMPLATE").toLowerCase());
                objConfiguration.setStrColour(oResultSet.getString("ICONCOLOR").toLowerCase());
                objConfiguration.setStrColourDimmed(oResultSet.getString("ICONDCOLOR").toLowerCase());
                objConfiguration.setStrBFont(oResultSet.getString("BIGFONT").toString());
                objConfiguration.setIntBFontSize(Integer.parseInt(oResultSet.getString("BIGFONTSIZE").toString()));
                objConfiguration.setStrSFont(oResultSet.getString("SMALLFONT").toString());
                objConfiguration.setIntSFontSize(Integer.parseInt(oResultSet.getString("SMALLFONTSIZE").toString()));
                objConfiguration.setStrDataPath(oResultSet.getString("DATAPATH").toString());
                objConfiguration.setStrHelpPath(oResultSet.getString("HELPPATH").toString());
                objConfiguration.setStrSavePath(oResultSet.getString("SAVEPATH").toString());
                objConfiguration.setStrLogPath(oResultSet.getString("LOGPATH").toString());
                objConfiguration.setStrErrorPath(oResultSet.getString("ERRORPATH").toString());
                objConfiguration.setStrAllowShare(Integer.toHexString(oResultSet.getInt("is_synchronization")));
                objConfiguration.getObjUser().setUserAccess(new Hashtable());                
                objConfiguration.getObjUser().setUserAccess("FABRIC_LIBRARY",oResultSet.getString("FABRIC_LIBRARY"));
                objConfiguration.getObjUser().setUserAccess("ARTWORK_LIBRARY",oResultSet.getString("ARTWORK_LIBRARY"));
                objConfiguration.getObjUser().setUserAccess("WEAVE_LIBRARY",oResultSet.getString("WEAVE_LIBRARY"));
                objConfiguration.getObjUser().setUserAccess("CLOTH_LIBRARY",oResultSet.getString("CLOTH_LIBRARY"));
                objConfiguration.getObjUser().setUserAccess("PATTERN_LIBRARY",oResultSet.getString("PATTERN_LIBRARY"));
                objConfiguration.getObjUser().setUserAccess("YARN_LIBRARY",oResultSet.getString("YARN_LIBRARY"));
                objConfiguration.getObjUser().setUserAccess("COLOUR_LIBRARY",oResultSet.getString("COLOUR_LIBRARY"));
                objConfiguration.getObjUser().setUserAccess("LANGUAGE_LIBRARY",oResultSet.getString("LANGUAGE_LIBRARY"));
                objConfiguration.getObjUser().setUserAccess("DEVICE_LIBRARY",oResultSet.getString("DEVICE_LIBRARY"));
                objConfiguration.getObjUser().setUserAccess("FABRIC_BASE_LIBRARY",oResultSet.getString("FABRIC_BASE_LIBRARY"));
                objConfiguration.setStrDefaultFabric(oResultSet.getString("DEFAULTFABRIC").toString());
                objConfiguration.setStrClothType(oResultSet.getString("CLOTHTYPE").toString());
                objConfiguration.setStrFabricType(oResultSet.getString("FABRICTYPE").toString());
                objConfiguration.setDblFabricLength(Float.parseFloat(oResultSet.getString("FABRICLENGTH").toString()));
                objConfiguration.setDblFabricWidth(Float.parseFloat(oResultSet.getString("FABRICWIDTH").toString()));
                objConfiguration.setDblArtworkLength(Float.parseFloat(oResultSet.getString("ARTWORKLENGTH").toString()));
                objConfiguration.setDblArtworkWidth(Float.parseFloat(oResultSet.getString("ARTWORKWIDTH").toString()));
                objConfiguration.setIntProtection(Integer.parseInt(oResultSet.getString("PROTECTION").toString()));
                objConfiguration.setIntBinding(Integer.parseInt(oResultSet.getString("BINDING").toString()));
                objConfiguration.setStrGraphSize(oResultSet.getString("GRAPHSIZE").toString());
                objConfiguration.setIntPPI(Integer.parseInt(oResultSet.getString("PPI").toString()));
                objConfiguration.setIntEPI(Integer.parseInt(oResultSet.getString("EPI").toString()));
                objConfiguration.setIntHPI(Integer.parseInt(oResultSet.getString("HPI").toString()));
                objConfiguration.setIntTPD(Integer.parseInt(oResultSet.getString("TPD").toString()));
                objConfiguration.setIntHooks(Integer.parseInt(oResultSet.getString("HOOKS").toString()));
                objConfiguration.setIntPixs(Integer.parseInt(oResultSet.getString("PICKS").toString()));
                objConfiguration.setIntReedCount(Integer.parseInt(oResultSet.getString("REEDCOUNT").toString()));
                objConfiguration.setIntDents(Integer.parseInt(oResultSet.getString("DENTS").toString()));
                objConfiguration.setStrWeftName(oResultSet.getString("WEFTNAME").toString());
                objConfiguration.setStrWeftPattern(oResultSet.getString("WEFTPATTERN").toString());
                objConfiguration.setStrWeftColor(oResultSet.getString("WEFTCOLOR").toString());
                objConfiguration.setIntWeftRepeat(Integer.parseInt(oResultSet.getString("WEFTREPEAT").toString()));
                objConfiguration.setIntWeftCount(Integer.parseInt(oResultSet.getString("WEFTCOUNT").toString()));
                objConfiguration.setStrWeftUnit(oResultSet.getString("WEFTUNIT").toString());
                objConfiguration.setIntWeftPly(Integer.parseInt(oResultSet.getString("WEFTPLY").toString()));
                objConfiguration.setIntWeftFactor(Integer.parseInt(oResultSet.getString("WEFTDFACTOR").toString()));
                objConfiguration.setDblWeftDiameter(Float.parseFloat(oResultSet.getString("WEFTDIAMETER").toString()));
                objConfiguration.setIntWeftTwist(Integer.parseInt(oResultSet.getString("WEFTTWIST").toString()));
                objConfiguration.setStrWeftSence(oResultSet.getString("WEFTTSENCE").toString());
                objConfiguration.setIntWeftHairness(Integer.parseInt(oResultSet.getString("WEFTHAIRNESS").toString()));
                objConfiguration.setIntWeftDistribution(Integer.parseInt(oResultSet.getString("WEFTHDISTRIBUTION").toString()));
                objConfiguration.setDblWeftPrice(Float.parseFloat(oResultSet.getString("WEFTPRICE").toString()));
                objConfiguration.setStrWarpName(oResultSet.getString("WARPNAME").toString());
                objConfiguration.setStrWarpPattern(oResultSet.getString("WARPPATTERN").toString());
                objConfiguration.setStrWarpColor(oResultSet.getString("WARPCOLOR").toString());
                objConfiguration.setIntWarpRepeat(Integer.parseInt(oResultSet.getString("WARPREPEAT").toString()));
                objConfiguration.setIntWarpCount(Integer.parseInt(oResultSet.getString("WARPCOUNT").toString()));
                objConfiguration.setStrWarpUnit(oResultSet.getString("WARPUNIT").toString());
                objConfiguration.setIntWarpPly(Integer.parseInt(oResultSet.getString("WARPPLY").toString()));
                objConfiguration.setIntWarpFactor(Integer.parseInt(oResultSet.getString("WARPDFACTOR").toString()));
                objConfiguration.setDblWarpDiameter(Float.parseFloat(oResultSet.getString("WARPDIAMETER").toString()));
                objConfiguration.setIntWarpTwist(Integer.parseInt(oResultSet.getString("WARPTWIST").toString()));
                objConfiguration.setStrWarpSence(oResultSet.getString("WARPTSENCE").toString());
                objConfiguration.setIntWarpHairness(Integer.parseInt(oResultSet.getString("WARPHAIRNESS").toString()));
                objConfiguration.setIntWarpDistribution(Integer.parseInt(oResultSet.getString("WARPHDISTRIBUTION").toString()));
                objConfiguration.setDblWarpPrice(Float.parseFloat(oResultSet.getString("WARPPRICE").toString()));
            }            
            return true;
        } catch (Exception ex) {
            new Logging("SEVERE",UserView.class.getName(),"getConfiguration()"+strQuery,ex);
        } finally {
            try {
                new Logging("INFO",UserView.class.getName(),"getConfiguration() connection closed",null);
                if(oResultSet!=null) {
                    oResultSet.close();
                    oResultSet=null;
                }
                if(oStatement!=null) {
                    oStatement.close();
                    oStatement=null;
                }
                if(connection!=null) {
                    connection.close();
                    connection=null;
                }
            } catch (Exception ex) {
                new Logging("SEVERE",UserView.class.getName(),"getConfiguration() error closing connection",ex);
            }
        }
        //System.out.println("<<<<<< getConfiguration >>>>>>");
        return false;
    }
    
    /**
     * Description:
     *  To update user password to specified new password (Usage via: Edit Profile -> Change Password).
     *  NEW plain text password is firstly hashed using BCrypt Hashing Algorithm hashPassword().
     *  Hashed password is updated into database table "mla_users" using SQL UPDATE query.
     * Date Added: 9 Feb 2017
     * Author: Aatif Ahmad Khan
     * @param userid
     * @param newPassword
     * @return status (updated or not)
     */
    boolean updatePassword(User objUser){
        String strQuery=null;
        boolean oResult=false;
        try {
            objUser.setStrPassword(Security.hashPassword(objUser.getStrPassword()));
            //System.out.println("<<<<<< update password >>>>>>");
            strQuery = "UPDATE `mla_users` SET `password`='"+objUser.getStrPassword()+"' WHERE `userid`='"+objUser.getStrUserID()+"';";
            //System.out.println("Query: "+strQuery);
            
            PreparedStatement pstmt = connection.prepareStatement(strQuery);  
            int rowsUpdated = pstmt.executeUpdate();    // updated rows after firing SQL Update
            if(rowsUpdated==1)
                oResult=true;                           // password updated successfully
        } catch (Exception ex) {
            new Logging("SEVERE",UserAction.class.getName(),"updatePassword()"+strQuery,ex);
        } finally {
            try {
                new Logging("INFO",UserAction.class.getName(),"updatePassword() connection closed",null);
                if(connection!=null) {
                    connection.close();                 // close connection to database
                    connection=null;
                }
            } catch (Exception ex) {
                new Logging("SEVERE",UserAction.class.getName(),"updatePassword() error closing connection",ex);
            }
        }
        //System.out.println("<<<<<< updatePassword >>>>>>");
        return oResult;
    }
    
    public boolean updateUserProfile(Configuration objConfiguration) {
        PreparedStatement oPreparedStatement =null;
        String strQuery=null;
        boolean oResult = false;
        try {           
            System.out.println("<<<<<< updateUserProfile >>>>>>"+objConfiguration.getObjUser().getStrUserID());
            strQuery = "UPDATE mla_users SET `name` = ?, `email` = ?, `organization` = ?, `contact_number` = ?, `geo_city` = ?, `geo_lat` = ?, `geo_lng` = ?, `address` = ?, `city` = ?, `state` = ?, `country` = ?, `pincode` = ?, `occupation` = ?, `education` = ?, `gender` = ?, `dob` = ? where USERID = ?;";
            oPreparedStatement = connection.prepareStatement(strQuery);
            oPreparedStatement.setString(1, objConfiguration.getObjUser().getStrName());
            oPreparedStatement.setString(2, objConfiguration.getObjUser().getStrEmail());
            oPreparedStatement.setString(3, objConfiguration.getObjUser().getStrOrganization());
            oPreparedStatement.setString(4, objConfiguration.getObjUser().getStrContactNumber());
            oPreparedStatement.setString(5, objConfiguration.getObjUser().getStrGeoCity());
            oPreparedStatement.setDouble(6, objConfiguration.getObjUser().getDblGeoLat());
            oPreparedStatement.setDouble(7, objConfiguration.getObjUser().getDblGeoLng());
            oPreparedStatement.setString(8, objConfiguration.getObjUser().getStrAddress());
            oPreparedStatement.setString(9, objConfiguration.getObjUser().getStrCityAddress());
            oPreparedStatement.setString(10, objConfiguration.getObjUser().getStrStateAddress());
            oPreparedStatement.setString(11, objConfiguration.getObjUser().getStrCountryAddress());
            oPreparedStatement.setString(12, objConfiguration.getObjUser().getStrPincodeAddress());
            oPreparedStatement.setString(13, objConfiguration.getObjUser().getStrOccupation());
            oPreparedStatement.setString(14, objConfiguration.getObjUser().getStrEducation());
            oPreparedStatement.setString(15, objConfiguration.getObjUser().getStrGender());
            oPreparedStatement.setString(16, objConfiguration.getObjUser().getStrDOB());            
            oPreparedStatement.setString(17, objConfiguration.getObjUser().getStrUserID());
            // execute the java preparedstatement
            oPreparedStatement.executeUpdate();
            //System.out.println("Query "+strQuery);
            oResult = true;
        } catch (Exception ex) {
            new Logging("SEVERE",UserAction.class.getName(),"updateUserProfile() error 1",ex);
        } finally {
            try {                
                if(oPreparedStatement!=null) {
                    oPreparedStatement.close();
                    oPreparedStatement=null;
                }
                if(connection!=null) {
                    connection.close();
                    connection=null;
                }
            } catch (Exception ex) {
                new Logging("SEVERE",UserAction.class.getName(),"updateUserProfile() error 2",ex);
            }
        }
        System.out.println("<<<<<< updateUserProfile >>>>>>");
        return oResult;
    }
    
    public boolean updateUserPrefrence(Configuration objConfiguration) {
        PreparedStatement oPreparedStatement =null;
        String strQuery=null;
        boolean oResult = false;
        try {           
            System.out.println("<<<<<< updateUserPrefrence >>>>>>"+objConfiguration.getObjUser().getStrUserID());
            strQuery = "UPDATE mla_user_preference SET `CURRENCY` = ?, `MEASUREMENT` = ?, `LANGUAGE` = ?, `RESOLUTION` = ?, `DPI` = ?, "
                    + "`TEMPLATE` = ?, `ICONCOLOR` = ?, `ICONDCOLOR` = ?, `BIGFONT` = ?, `BIGFONTSIZE` = ?, `SMALLFONT` = ?, `SMALLFONTSIZE` = ?,"
                    + "`DATAPATH` = ?, `HELPPATH` = ?, `SAVEPATH` = ?, `LOGPATH` = ?, `ERRORPATH` = ?"
                    + " where USERID = ?;";
            
            oPreparedStatement = connection.prepareStatement(strQuery);
            oPreparedStatement.setString(1, objConfiguration.getStrCurrency());
            oPreparedStatement.setString(2, objConfiguration.getStrMeasurement());
            oPreparedStatement.setString(3, objConfiguration.getStrLanguage());
            oPreparedStatement.setString(4, objConfiguration.getStrResolution());
            oPreparedStatement.setInt(5, objConfiguration.getIntDPI());
            oPreparedStatement.setString(6, objConfiguration.getStrTemplate());
            oPreparedStatement.setString(7, objConfiguration.getStrColour());
            oPreparedStatement.setString(8, objConfiguration.getStrColourDimmed());
            oPreparedStatement.setString(9, objConfiguration.getStrBFont());
            oPreparedStatement.setInt(10, objConfiguration.getIntBFontSize());
            oPreparedStatement.setString(11, objConfiguration.getStrSFont());
            oPreparedStatement.setInt(12, objConfiguration.getIntSFontSize());
            oPreparedStatement.setString(13, objConfiguration.getStrDataPath());
            oPreparedStatement.setString(14, objConfiguration.getStrHelpPath());
            oPreparedStatement.setString(15, objConfiguration.getStrSavePath());
            oPreparedStatement.setString(16, objConfiguration.getStrLogPath());
            oPreparedStatement.setString(17, objConfiguration.getStrErrorPath());
            oPreparedStatement.setString(18, objConfiguration.getObjUser().getStrUserID());
            // execute the java preparedstatement
            oPreparedStatement.executeUpdate();
            //System.out.println("Query "+strQuery);
            oResult = true;
        } catch (Exception ex) {
            new Logging("SEVERE",UserAction.class.getName(),"updateUserPrefrence() error 1",ex);
        } finally {
            try {                
                if(oPreparedStatement!=null) {
                    oPreparedStatement.close();
                    oPreparedStatement=null;
                }
                if(connection!=null) {
                    connection.close();
                    connection=null;
                }
            } catch (Exception ex) {
                new Logging("SEVERE",UserAction.class.getName(),"updateUserPrefrence() error 2",ex);
            }
        }
        System.out.println("<<<<<< updateUserPrefrence >>>>>>");
        return oResult;
    }
    
    public boolean updateUserAccess(Configuration objConfiguration) {
        PreparedStatement oPreparedStatement =null;
        String strQuery=null;
        boolean oResult = false;
        try {           
            System.out.println("<<<<<< updateUserAccess >>>>>>"+objConfiguration.getObjUser().getStrUserID());
            strQuery = "UPDATE mla_user_access SET `FABRIC_LIBRARY` = ?,`ARTWORK_LIBRARY` = ?,`WEAVE_LIBRARY` = ?,`CLOTH_LIBRARY` = ?,`PATTERN_LIBRARY` = ?,`YARN_LIBRARY` = ?,`COLOUR_LIBRARY` = ?,`LANGUAGE_LIBRARY` = ?,`DEVICE_LIBRARY` = ?, `FABRIC_BASE_LIBRARY` = ? where USERID = ?;";
            
            oPreparedStatement = connection.prepareStatement(strQuery);
            oPreparedStatement.setString(1, objConfiguration.getObjUser().getUserAccess("FABRIC_LIBRARY"));
            oPreparedStatement.setString(2, objConfiguration.getObjUser().getUserAccess("ARTWORK_LIBRARY"));
            oPreparedStatement.setString(3, objConfiguration.getObjUser().getUserAccess("WEAVE_LIBRARY"));
            oPreparedStatement.setString(4, objConfiguration.getObjUser().getUserAccess("CLOTH_LIBRARY"));
            oPreparedStatement.setString(5, objConfiguration.getObjUser().getUserAccess("PATTERN_LIBRARY"));
            oPreparedStatement.setString(6, objConfiguration.getObjUser().getUserAccess("YARN_LIBRARY"));
            oPreparedStatement.setString(7, objConfiguration.getObjUser().getUserAccess("COLOUR_LIBRARY"));
            oPreparedStatement.setString(8, objConfiguration.getObjUser().getUserAccess("LANGUAGE_LIBRARY"));
            oPreparedStatement.setString(9, objConfiguration.getObjUser().getUserAccess("DEVICE_LIBRARY")); 
            oPreparedStatement.setString(10, objConfiguration.getObjUser().getUserAccess("FABRIC_BASE_LIBRARY")); 
            oPreparedStatement.setString(11, objConfiguration.getObjUser().getStrUserID());
            // execute the java preparedstatement
            oPreparedStatement.executeUpdate();
            //System.out.println("Query "+strQuery);
            oResult = true;
        } catch (Exception ex) {
            new Logging("SEVERE",UserAction.class.getName(),"updateUserAccess() error 1",ex);
        } finally {
            try {                
                if(oPreparedStatement!=null) {
                    oPreparedStatement.close();
                    oPreparedStatement=null;
                }
                if(connection!=null) {
                    connection.close();
                    connection=null;
                }
            } catch (Exception ex) {
                new Logging("SEVERE",UserAction.class.getName(),"updateUserAccess() error 2",ex);
            }
        }
        System.out.println("<<<<<< updateUserAccess >>>>>>");
        return oResult;
    }
    
    public boolean updateConfiguration(Configuration objConfiguration) {
        PreparedStatement oPreparedStatement =null;
        String strQuery=null;
        boolean oResult = false;
        try {           
            System.out.println("<<<<<< updateConfiguration >>>>>>"+objConfiguration.getStrLanguage());
            strQuery = "UPDATE mla_user_configuration SET "
                    + " `DEFAULTFABRIC` = ?, `FABRICTYPE` = ?, `FABRICLENGTH` = ?, `FABRICWIDTH` = ?, `ARTWORKLENGTH` = ?, `ARTWORKWIDTH` = ?, `PPI` = ?, `EPI` = ?, `HPI` = ?, `TPD` = ?, `HOOKS` = ?, `PICKS` = ?, `REEDCOUNT` = ?, `DENTS` = ?, `PROTECTION` = ?, `BINDING` = ?, `GRAPHSIZE` = ?,"
                    + " `WEFTNAME` = ?, `WEFTCOLOR` = ?, `WEFTPATTERN` = ?, `WEFTREPEAT` = ?, `WEFTCOUNT` = ?, `WEFTUNIT` = ?, `WEFTPLY` = ?, `WEFTDFACTOR` = ?, `WEFTDIAMETER` = ?, `WEFTTWIST` = ?, `WEFTTSENCE` = ?, `WEFTHAIRNESS` = ?, `WEFTHDISTRIBUTION` = ?, `WEFTPRICE` = ?,"
                    + " `WARPNAME` = ?, `WARPCOLOR` = ?, `WARPPATTERN` = ?, `WARPREPEAT` = ?, `WARPCOUNT` = ?, `WARPUNIT` = ?, `WARPPLY` = ?, `WARPDFACTOR` = ?, `WARPDIAMETER` = ?, `WARPTWIST` = ?, `WARPTSENCE` = ?, `WARPHAIRNESS` = ?, `WARPHDISTRIBUTION` = ?, `WARPPRICE` = ?"
                    + " where USERID = ? AND `CLOTHTYPE` = ?;";
  
            oPreparedStatement = connection.prepareStatement(strQuery);
            oPreparedStatement.setString(1, objConfiguration.getStrDefaultFabric());
            oPreparedStatement.setString(2, objConfiguration.getStrFabricType());
            oPreparedStatement.setDouble(3, objConfiguration.getDblFabricLength());
            oPreparedStatement.setDouble(4, objConfiguration.getDblFabricWidth());
            oPreparedStatement.setDouble(5, objConfiguration.getDblArtworkLength());
            oPreparedStatement.setDouble(6, objConfiguration.getDblArtworkWidth());
            oPreparedStatement.setInt(7,objConfiguration.getIntPPI());
            oPreparedStatement.setInt(8,objConfiguration.getIntEPI());
            oPreparedStatement.setInt(9,objConfiguration.getIntHPI());
            oPreparedStatement.setInt(10,objConfiguration.getIntTPD());
            oPreparedStatement.setInt(11,objConfiguration.getIntHooks());
            oPreparedStatement.setInt(12,objConfiguration.getIntPixs());
            oPreparedStatement.setInt(13,objConfiguration.getIntReedCount());
            oPreparedStatement.setInt(14,objConfiguration.getIntDents());
            oPreparedStatement.setInt(15,objConfiguration.getIntProtection());
            oPreparedStatement.setInt(16,objConfiguration.getIntBinding());            
            oPreparedStatement.setString(17, objConfiguration.getStrGraphSize());            
            oPreparedStatement.setString(18, objConfiguration.getStrWeftName());
            oPreparedStatement.setString(19, objConfiguration.getStrWeftColor());
            oPreparedStatement.setString(20, objConfiguration.getStrWeftPattern());
            oPreparedStatement.setInt(21,objConfiguration.getIntWeftRepeat());
            oPreparedStatement.setInt(22,objConfiguration.getIntWeftCount());
            oPreparedStatement.setString(23, objConfiguration.getStrWeftUnit());
            oPreparedStatement.setInt(24,objConfiguration.getIntWeftPly());
            oPreparedStatement.setInt(25, objConfiguration.getIntWeftFactor());
            oPreparedStatement.setDouble(26, objConfiguration.getDblWeftDiameter());
            oPreparedStatement.setInt(27,objConfiguration.getIntWeftTwist());
            oPreparedStatement.setString(28, objConfiguration.getStrWeftSence());
            oPreparedStatement.setInt(29,objConfiguration.getIntWeftHairness());
            oPreparedStatement.setInt(30,objConfiguration.getIntWeftDistribution());
            oPreparedStatement.setDouble(31, objConfiguration.getDblWeftPrice());
            oPreparedStatement.setString(32, objConfiguration.getStrWarpName());
            oPreparedStatement.setString(33, objConfiguration.getStrWarpColor());
            oPreparedStatement.setString(34, objConfiguration.getStrWarpPattern());
            oPreparedStatement.setInt(35,objConfiguration.getIntWarpRepeat());
            oPreparedStatement.setInt(36,objConfiguration.getIntWarpCount());
            oPreparedStatement.setString(37, objConfiguration.getStrWarpUnit());
            oPreparedStatement.setInt(38,objConfiguration.getIntWarpPly());
            oPreparedStatement.setInt(39, objConfiguration.getIntWarpFactor());
            oPreparedStatement.setDouble(40, objConfiguration.getDblWarpDiameter());
            oPreparedStatement.setInt(41,objConfiguration.getIntWarpTwist());
            oPreparedStatement.setString(42, objConfiguration.getStrWarpSence());
            oPreparedStatement.setInt(43,objConfiguration.getIntWarpHairness());
            oPreparedStatement.setInt(44,objConfiguration.getIntWarpDistribution());      
            oPreparedStatement.setDouble(45, objConfiguration.getDblWarpPrice());
            oPreparedStatement.setString(46, objConfiguration.getObjUser().getStrUserID());
            oPreparedStatement.setString(47, objConfiguration.getStrClothType());
            // execute the java preparedstatement
            oPreparedStatement.executeUpdate();
            System.out.println("Query "+strQuery);
            oResult = true;
        } catch (Exception ex) {
            new Logging("SEVERE",UserAction.class.getName(),"updateConfiguration() error 1",ex);
        } finally {
            try {                
                if(oPreparedStatement!=null) {
                    oPreparedStatement.close();
                    oPreparedStatement=null;
                }
                if(connection!=null) {
                    connection.close();
                    connection=null;
                }
            } catch (Exception ex) {
                new Logging("SEVERE",UserAction.class.getName(),"updateConfiguration() error 2",ex);
            }
        }
        System.out.println("<<<<<< updateConfiguration >>>>>>");
        return oResult;
    }
    
    public boolean addUserPrefrence(Configuration objConfiguration) {
        PreparedStatement oPreparedStatement =null;
        String strQuery=null;
        boolean oResult = false;
        try {           
            System.out.println("<<<<<< addUserPrefrence >>>>>>"+objConfiguration.getObjUser().getStrUserID());
            strQuery = "INSERT INTO mla_user_preference (`USERID`, `CURRENCY`, `MEASUREMENT`, `LANGUAGE`, `RESOLUTION`, `DPI`, "
                    + "`TEMPLATE`, `ICONCOLOR`, `ICONDCOLOR`, `BIGFONT`, `BIGFONTSIZE`, `SMALLFONT`, `SMALLFONTSIZE`, "
                    + "`DATAPATH`, `HELPPATH`, `SAVEPATH`, `LOGPATH`, `ERRORPATH`) "
                    + " VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
            oPreparedStatement = connection.prepareStatement(strQuery);
            oPreparedStatement.setString(1, objConfiguration.getObjUser().getStrUserID());
            oPreparedStatement.setString(2, objConfiguration.getStrCurrency());
            oPreparedStatement.setString(3, objConfiguration.getStrMeasurement());
            oPreparedStatement.setString(4, objConfiguration.getStrLanguage());
            oPreparedStatement.setString(5, objConfiguration.getStrResolution());
            oPreparedStatement.setInt(6, objConfiguration.getIntDPI());
            oPreparedStatement.setString(7, objConfiguration.getStrTemplate());
            oPreparedStatement.setString(8, objConfiguration.getStrColour());
            oPreparedStatement.setString(9, objConfiguration.getStrColourDimmed());
            oPreparedStatement.setString(10, objConfiguration.getStrBFont());
            oPreparedStatement.setInt(11, objConfiguration.getIntBFontSize());
            oPreparedStatement.setString(12, objConfiguration.getStrSFont());
            oPreparedStatement.setInt(13, objConfiguration.getIntSFontSize());
            oPreparedStatement.setString(14, objConfiguration.getStrDataPath());
            oPreparedStatement.setString(15, objConfiguration.getStrHelpPath());
            oPreparedStatement.setString(16, objConfiguration.getStrSavePath());
            oPreparedStatement.setString(17, objConfiguration.getStrLogPath());
            oPreparedStatement.setString(18, objConfiguration.getStrErrorPath());
            // execute the java preparedstatement
            oPreparedStatement.executeUpdate();
            System.out.println("Query "+strQuery);
            oResult = true;
        } catch (Exception ex) {
            new Logging("SEVERE",UserAction.class.getName(),"addUserPrefrence() error 1",ex);
        } finally {
            try {                
                if(oPreparedStatement!=null) {
                    oPreparedStatement.close();
                    oPreparedStatement=null;
                }
                if(connection!=null) {
                    connection.close();
                    connection=null;
                }
            } catch (Exception ex) {
                new Logging("SEVERE",UserAction.class.getName(),"addUserPrefrence() error 2",ex);
            }
        }
        System.out.println("<<<<<< addUserPrefrence >>>>>>");
        return oResult;
    }   
    
    public boolean addUserAccess(Configuration objConfiguration) {
        PreparedStatement oPreparedStatement =null;
        String strQuery=null;
        boolean oResult = false;
        try {           
            System.out.println("<<<<<< updateUserAccess >>>>>>"+objConfiguration.getObjUser().getStrUserID());
            strQuery = "INSERT mla_user_access (`USERID`, `FABRIC_LIBRARY`,`ARTWORK_LIBRARY`, `WEAVE_LIBRARY`, `CLOTH_LIBRARY`, `PATTERN_LIBRARY`, `YARN_LIBRARY`, `COLOUR_LIBRARY`, `LANGUAGE_LIBRARY`, `DEVICE_LIBRARY`, `FABRIC_BASE_LIBRARY`) VALUES (?,?,?,?,?,?,?,?,?,?,?);";
            
            oPreparedStatement = connection.prepareStatement(strQuery);
            oPreparedStatement.setString(1, objConfiguration.getObjUser().getStrUserID());
            oPreparedStatement.setString(2, objConfiguration.getObjUser().getUserAccess("FABRIC_LIBRARY"));
            oPreparedStatement.setString(3, objConfiguration.getObjUser().getUserAccess("ARTWORK_LIBRARY"));
            oPreparedStatement.setString(4, objConfiguration.getObjUser().getUserAccess("WEAVE_LIBRARY"));
            oPreparedStatement.setString(5, objConfiguration.getObjUser().getUserAccess("CLOTH_LIBRARY"));
            oPreparedStatement.setString(6, objConfiguration.getObjUser().getUserAccess("PATTERN_LIBRARY"));
            oPreparedStatement.setString(7, objConfiguration.getObjUser().getUserAccess("YARN_LIBRARY"));
            oPreparedStatement.setString(8, objConfiguration.getObjUser().getUserAccess("COLOUR_LIBRARY"));
            oPreparedStatement.setString(9, objConfiguration.getObjUser().getUserAccess("LANGUAGE_LIBRARY"));
            oPreparedStatement.setString(10, objConfiguration.getObjUser().getUserAccess("DEVICE_LIBRARY"));
            oPreparedStatement.setString(11, objConfiguration.getObjUser().getUserAccess("FABRIC_BASE_LIBRARY")); 
            // execute the java preparedstatement
            oPreparedStatement.executeUpdate();
            System.out.println("Query "+strQuery);
            oResult = true;
        } catch (Exception ex) {
            new Logging("SEVERE",UserAction.class.getName(),"updateUserAccess() error 1",ex);
        } finally {
            try {                
                if(oPreparedStatement!=null) {
                    oPreparedStatement.close();
                    oPreparedStatement=null;
                }
                if(connection!=null) {
                    connection.close();
                    connection=null;
                }
            } catch (Exception ex) {
                new Logging("SEVERE",UserAction.class.getName(),"updateUserAccess() error 2",ex);
            }
        }
        System.out.println("<<<<<< updateUserAccess >>>>>>");
        return oResult;
    }
    
    public boolean addUserConfiguration(Configuration objConfiguration) {
        PreparedStatement oPreparedStatement =null;
        String strQuery=null;
        boolean oResult = false;
        try {           
            System.out.println("<<<<<< addUserConfiguration >>>>>>"+objConfiguration.getStrLanguage());
            strQuery = "INSERT INTO mla_user_configuration ("
                    + " `USERID`, `CLOTHTYPE`, `DEFAULTFABRIC`, `FABRICTYPE`, `FABRICLENGTH`, `FABRICWIDTH`, `ARTWORKLENGTH`, `ARTWORKWIDTH`, `PPI`, `EPI`, `HPI`, `TPD`, `HOOKS`, `PICKS`, `REEDCOUNT`, `DENTS`, `PROTECTION`, `BINDING`, `GRAPHSIZE`,"
                    + " `WEFTNAME`, `WEFTCOLOR`, `WEFTPATTERN`, `WEFTREPEAT`, `WEFTCOUNT`, `WEFTUNIT`, `WEFTPLY`, `WEFTDFACTOR`, `WEFTDIAMETER`, `WEFTTWIST`, `WEFTTSENCE`, `WEFTHAIRNESS`, `WEFTHDISTRIBUTION`, `WEFTPRICE`,"
                    + " `WARPNAME`, `WARPCOLOR`, `WARPPATTERN`, `WARPREPEAT`, `WARPCOUNT`, `WARPUNIT`, `WARPPLY`, `WARPDFACTOR`, `WARPDIAMETER`, `WARPTWIST`, `WARPTSENCE`, `WARPHAIRNESS`, `WARPHDISTRIBUTION`, `WARPPRICE`, `ID`)"
                    + " VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
            oPreparedStatement = connection.prepareStatement(strQuery);
            oPreparedStatement.setString(1, objConfiguration.getObjUser().getStrUserID());
            oPreparedStatement.setString(2, objConfiguration.getStrClothType());
            oPreparedStatement.setString(3, objConfiguration.getStrDefaultFabric());
            oPreparedStatement.setString(4, objConfiguration.getStrFabricType());
            oPreparedStatement.setDouble(5, objConfiguration.getDblFabricLength());
            oPreparedStatement.setDouble(6, objConfiguration.getDblFabricWidth());
            oPreparedStatement.setDouble(7, objConfiguration.getDblArtworkLength());
            oPreparedStatement.setDouble(8, objConfiguration.getDblArtworkWidth());
            oPreparedStatement.setInt(9,objConfiguration.getIntPPI());
            oPreparedStatement.setInt(10,objConfiguration.getIntEPI());
            oPreparedStatement.setInt(11,objConfiguration.getIntHPI());
            oPreparedStatement.setInt(12,objConfiguration.getIntTPD());
            oPreparedStatement.setInt(13,objConfiguration.getIntHooks());
            oPreparedStatement.setInt(14,objConfiguration.getIntPixs());
            oPreparedStatement.setInt(15,objConfiguration.getIntReedCount());
            oPreparedStatement.setInt(16,objConfiguration.getIntDents());
            oPreparedStatement.setInt(17,objConfiguration.getIntProtection());
            oPreparedStatement.setInt(18,objConfiguration.getIntBinding());            
            oPreparedStatement.setString(19, objConfiguration.getStrGraphSize());            
            oPreparedStatement.setString(20, objConfiguration.getStrWeftName());
            oPreparedStatement.setString(21, objConfiguration.getStrWeftColor());
            oPreparedStatement.setString(22, objConfiguration.getStrWeftPattern());
            oPreparedStatement.setInt(23,objConfiguration.getIntWeftRepeat());
            oPreparedStatement.setInt(24,objConfiguration.getIntWeftCount());
            oPreparedStatement.setString(25, objConfiguration.getStrWeftUnit());
            oPreparedStatement.setInt(26,objConfiguration.getIntWeftPly());
            oPreparedStatement.setInt(27, objConfiguration.getIntWeftFactor());
            oPreparedStatement.setDouble(28, objConfiguration.getDblWeftDiameter());
            oPreparedStatement.setInt(29,objConfiguration.getIntWeftTwist());
            oPreparedStatement.setString(30, objConfiguration.getStrWeftSence());
            oPreparedStatement.setInt(31,objConfiguration.getIntWeftHairness());
            oPreparedStatement.setInt(32,objConfiguration.getIntWeftDistribution());
            oPreparedStatement.setDouble(33, objConfiguration.getDblWeftPrice());
            oPreparedStatement.setString(34, objConfiguration.getStrWarpName());
            oPreparedStatement.setString(35, objConfiguration.getStrWarpColor());
            oPreparedStatement.setString(36, objConfiguration.getStrWarpPattern());
            oPreparedStatement.setInt(37,objConfiguration.getIntWarpRepeat());
            oPreparedStatement.setInt(38,objConfiguration.getIntWarpCount());
            oPreparedStatement.setString(39, objConfiguration.getStrWarpUnit());
            oPreparedStatement.setInt(40,objConfiguration.getIntWarpPly());
            oPreparedStatement.setInt(41, objConfiguration.getIntWarpFactor());
            oPreparedStatement.setDouble(42, objConfiguration.getDblWarpDiameter());
            oPreparedStatement.setInt(43,objConfiguration.getIntWarpTwist());
            oPreparedStatement.setString(44, objConfiguration.getStrWarpSence());
            oPreparedStatement.setInt(45,objConfiguration.getIntWarpHairness());
            oPreparedStatement.setInt(46,objConfiguration.getIntWarpDistribution());      
            oPreparedStatement.setDouble(47, objConfiguration.getDblWarpPrice());
            oPreparedStatement.setString(48, objConfiguration.getStrConfName());
            // execute the java preparedstatement
            oPreparedStatement.executeUpdate();
            System.out.println("Query "+strQuery);
            oResult = true;
        } catch (Exception ex) {
            new Logging("SEVERE",UserAction.class.getName(),"addUserConfiguration() error 1",ex);
        } finally {
            try {                
                if(oPreparedStatement!=null) {
                    oPreparedStatement.close();
                    oPreparedStatement=null;
                }
                if(connection!=null) {
                    connection.close();
                    connection=null;
                }
            } catch (Exception ex) {
                new Logging("SEVERE",UserAction.class.getName(),"addUserConfiguration() error 2",ex);
            }
        }
        System.out.println("<<<<<< addUserConfiguration >>>>>>");
        return oResult;
    }
    
    public boolean trackUser(User objUser, String strModule, String StrActivity, String userDetails) {
        PreparedStatement oPreparedStatement =null;
        String strQuery=null;
        boolean oResult = false;
        try {           
            System.out.println("<<<<<< trackUser >>>>>>");
            strQuery = "INSERT INTO mla_user_tracking "
                    + "(`ID`, `USERID`, `MODULE`, `ACTIVITY`, `DETAILES`)"
                    + " VALUES( ?, ?, ?, ?, ?);";
            oPreparedStatement = connection.prepareStatement(strQuery);
            oPreparedStatement.setString(1, objUser.getStrSeesionID());
            oPreparedStatement.setString(2, objUser.getStrUserID());
            oPreparedStatement.setString(3, strModule);
            oPreparedStatement.setString(4, StrActivity);
            oPreparedStatement.setString(5, userDetails);
            // execute the java preparedstatement
            oPreparedStatement.executeUpdate();
            System.out.println("Query "+strQuery);
            oResult = true;
        } catch (Exception ex) {
            new Logging("SEVERE",UserAction.class.getName(),"trackUser() error 1",ex);
        } finally {
            try {                
                if(oPreparedStatement!=null) {
                    oPreparedStatement.close();
                    oPreparedStatement=null;
                }
                if(connection!=null) {
                    connection.close();
                    connection=null;
                }
            } catch (Exception ex) {
                new Logging("SEVERE",UserAction.class.getName(),"trackUser() error 2",ex);
            }
        }
        System.out.println("<<<<<< trackUser >>>>>>");
        return oResult;
    }

    File getLatestLicenseContent(){
        Statement oStatement =null;
        ResultSet oResultSet= null;
        String strQuery=null;
        String strLicenseContent="";
        byte[] fileBytes=null;
        File f=null;
        try{
            strQuery="SELECT FILE FROM mla_master_tnc ORDER BY UDATE DESC LIMIT 1;";
            oStatement = connection.createStatement();
            oResultSet = oStatement.executeQuery(strQuery);
            //if(oResultSet.next())
            //    strLicenseContent=new String(oResultSet.getBytes("FILE"));
            if(oResultSet.next()){
                fileBytes=oResultSet.getBytes("FILE");
                f=new File("Disclaimer.html");
                OutputStream targetFile=new FileOutputStream(f);
                targetFile.write(fileBytes);
                targetFile.close();
                //strLicenseContent=new String(oResultSet.getBytes("FILE"));
            }
        } catch(Exception ex){
            new Logging("ERROR", UserAction.class.getName(), strQuery, ex);
        }
        return f;
    }
    
    boolean isUserLicenseIdLatest(String UserId){
        Statement oStatement =null;
        ResultSet oResultSet= null;
        String strQuery=null;
        boolean isLatest=false;
        try{
            strQuery="SELECT `TNCID` FROM mla_user_tnc WHERE `USERID`='"+UserId+"' AND TNCID="+getLatestLicenseId()+";";
            oStatement = connection.createStatement();
            oResultSet = oStatement.executeQuery(strQuery);
            if(oResultSet.next())
                isLatest=true;
        } catch(Exception ex){
            new Logging("ERROR", UserAction.class.getName(), strQuery, ex);
        }
        return isLatest;
    }
    
    String getLatestLicenseId(){
        Statement oStatement =null;
        ResultSet oResultSet= null;
        String strQuery=null;
        String strLicenseId=null;
        try{
            strQuery="SELECT * FROM mla_master_tnc ORDER BY UDATE DESC LIMIT 1;";
            oStatement = connection.createStatement();
            oResultSet = oStatement.executeQuery(strQuery);
            if(oResultSet.next())
                strLicenseId=oResultSet.getString("ID"); 
            
        }
        catch(Exception ex){
            new Logging("ERROR", UserAction.class.getName(), strQuery, ex);
        }
        return strLicenseId;
    }
    
    boolean addUserTnC(String UserID){
        Statement oStatement =null;
        ResultSet oResultSet= null;
        String strQuery=null;
        boolean oResult=false;
        try {
            //System.out.println("<<<<<< addUserTnC >>>>>>");
            strQuery = "INSERT INTO `mla_user_tnc`(`USERID`, `TNCID`) values ('"+UserID+"', '"+getLatestLicenseId()+"');";
            //System.out.println("Query: "+strQuery);
            PreparedStatement pstmt = connection.prepareStatement(strQuery);
            pstmt.executeUpdate();
            oResult=true;       // insertion succeeded
        } catch (Exception ex) {
            new Logging("SEVERE",UserAction.class.getName(),"addUserTnC"+strQuery,ex);
        } finally {
            try {
                new Logging("INFO",UserAction.class.getName(),"addUserTnC connection closed",null);
                if(oResultSet!=null) {
                    oResultSet.close();
                    oResultSet=null;
                }
                if(oStatement!=null) {
                    oStatement.close();
                    oStatement=null;
                }
                if(connection!=null) {
                    connection.close();
                    connection=null;
                }
            } catch (Exception ex) {
                new Logging("SEVERE",UserAction.class.getName(),"addUserTnC error closing connection",ex);
            }
        }
        return oResult;
    }
    
    public List getLstCountry() {
        Statement oStatement =null;
        ResultSet oResultSet= null;
        String strQuery=null;
        List lstCountryDetails=null, lstCountry;
        new Logging("INFO",UserAction.class.getName(),"<<<<<<<<<<< lstCountry() >>>>>>>>>>>",null);            
        try {           
            strQuery = "select * from mla_master_country ORDER BY description";
            oStatement = connection.createStatement();
            oResultSet = oStatement.executeQuery(strQuery);    
            lstCountryDetails = new ArrayList();            
            while(oResultSet.next()) {
                lstCountry = new ArrayList();            
                lstCountry.add(oResultSet.getInt("_id"));
                lstCountry.add(oResultSet.getString("description")); 
                lstCountryDetails.add(lstCountry);
            }
        } catch (Exception ex) {
            new Logging("SEVERE",UserAction.class.getName(),"lstCountry() : "+strQuery,ex);
        } finally {
            try {
                if(oResultSet!=null) {
                    oResultSet.close();
                    oResultSet=null;
                }
                if(oStatement!=null) {
                    oStatement.close();
                    oStatement=null;
                }
                if(connection!=null) {
                    connection.close();
                    connection=null;
                }
            } catch (Exception ex) {
                try {
                    DbConnect.close(connection);                
                } catch (Exception e) {
                    new Logging("SEVERE",UserAction.class.getName(),"lstCountry() : Error while closing connection"+e,ex);
                }
            }
        }
        new Logging("INFO",UserAction.class.getName(),">>>>>>>>>>> lstCountry() <<<<<<<<<<<"+strQuery,null);
        return lstCountryDetails;
    }
    
    public List getLstState(int intCountry) {
        Statement oStatement =null;
        ResultSet oResultSet= null;
        String strQuery=null;
        List lstStateDetails=null, lstState;
        new Logging("INFO",UserAction.class.getName(),"<<<<<<<<<<< getLstState() >>>>>>>>>>>",null);            
        try {           
            strQuery = "select * from mla_master_state WHERE parent_id="+intCountry+" ORDER BY description;";
            oStatement = connection.createStatement();
            oResultSet = oStatement.executeQuery(strQuery);    
            lstStateDetails = new ArrayList();            
            while(oResultSet.next()) {
                lstState = new ArrayList();
                lstState.add(oResultSet.getInt("_id"));
                lstState.add(oResultSet.getString("description")); 
                lstStateDetails.add(lstState);
            }
        } catch (Exception ex) {
            new Logging("SEVERE",UserAction.class.getName(),"getLstState() : "+strQuery,ex);
        } finally {
            try {
                if(oResultSet!=null) {
                    oResultSet.close();
                    oResultSet=null;
                }
                if(oStatement!=null) {
                    oStatement.close();
                    oStatement=null;
                }
                if(connection!=null) {
                    connection.close();
                    connection=null;
                }
            } catch (Exception ex) {
                try {
                    DbConnect.close(connection);                
                } catch (Exception e) {
                    new Logging("SEVERE",UserAction.class.getName(),"getLstState() : Error while closing connection"+e,ex);
                }
            }
        }
        new Logging("INFO",UserAction.class.getName(),">>>>>>>>>>> getLstState() <<<<<<<<<<<"+strQuery,null);
        return lstStateDetails;
    }
    
    public List getLstCity(int intState) {
        Statement oStatement =null;
        ResultSet oResultSet= null;
        String strQuery=null;
        List lstCityDetails=null, lstCity;
        new Logging("INFO",UserAction.class.getName(),"<<<<<<<<<<< getLstCity() >>>>>>>>>>>",null);            
        try {           
            strQuery = "SELECT * FROM mla_master_district WHERE parent_id="+intState+" ORDER BY description";
            oStatement = connection.createStatement();
            oResultSet = oStatement.executeQuery(strQuery);    
            lstCityDetails = new ArrayList();            
            while(oResultSet.next()) {
                lstCity = new ArrayList();
                lstCity.add(oResultSet.getInt("_id"));
                lstCity.add(oResultSet.getString("description")); 
                lstCityDetails.add(lstCity);
            }
        } catch (Exception ex) {
            new Logging("SEVERE",UserAction.class.getName(),"lstCountry() : "+strQuery,ex);
        } finally {
            try {
                if(oResultSet!=null) {
                    oResultSet.close();
                    oResultSet=null;
                }
                if(oStatement!=null) {
                    oStatement.close();
                    oStatement=null;
                }
                if(connection!=null) {
                    connection.close();
                    connection=null;
                }
            } catch (Exception ex) {
                try {
                    DbConnect.close(connection);                
                } catch (Exception e) {
                    new Logging("SEVERE",UserAction.class.getName(),"getLstCity() : Error while closing connection"+e,ex);
                }
            }
        }
        new Logging("INFO",UserAction.class.getName(),">>>>>>>>>>> getLstCity() <<<<<<<<<<<"+strQuery,null);
        return lstCityDetails;
    }
}
